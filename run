#!/usr/bin/env python3
"""
Automation tool for building and running virtual machine images.
Equivalent to the Makefile tasks, with updated configuration and improved readability.
"""

import os
import re
import sys
import argparse
import subprocess
import shutil
import tarfile
import requests
import json

from config.config import config
from src.dependencies import install_dependencies
from src.create_new_vm import create_vm_image
from src.build_initramfs import build_initramfs
from src.build_content import build_guest_content
from src.create_vm_config import create_vm_config_file
from src.setup_guest import setup_guest


# -----------------------------------------------------------------------------
# Utility Functions
# -----------------------------------------------------------------------------
def run_command(cmd):
    """
    Run a shell command and exit if it fails.
    """
    print(f"Running: {cmd}")
    try:
        subprocess.run(cmd, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Command failed: {cmd}")
        sys.exit(e.returncode)


# -----------------------------------------------------------------------------
# Initialization & Setup Functions
# -----------------------------------------------------------------------------
def init():
    """
    Initialize the build environment:
      - Create necessary directories.
      - Install dependencies.
      - Download and extract SNP release.
      - Build attestation server and digest calculator.
    """

    # Go thru all config.dir and create the directories if they don't exist
    for d in config.dir.__dict__.values():
        if isinstance(d, str):
            os.makedirs(d, exist_ok=True)
            print(f"Ensured directory exists: {d}")

    # Install dependencies.
    install_dependencies(force=False)

    # Download and extract SNP release tarball.
    tarball = os.path.join(config.dir.build, "snp-release.tar.gz")
    # https://github.com/permaweb/snp-guard/releases/tag/v6.9.0
    print("Downloading SNP release 6.9...")
    url = "https://arweave.net/GnnSmMQlszX0lMa48KV92nX5ug-u2qiO7RxCdssxsU8" # SNP Release 6.9 
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(tarball, "wb") as f:
            shutil.copyfileobj(r.raw, f)
    run_command(f"tar -xf {tarball} -C {config.dir.build}")
    run_command(f"rm {tarball}")
    # Download the GPU admin tools
    run_command(f"cd {config.dir.build} && git clone https://github.com/permaweb/gpu-admin-tools && cd .. ")

    # Build attestation server binaries.
    run_command("cargo build --manifest-path=tools/attestation_server/Cargo.toml")
    for binary in [
        "server",
        "client",
        "get_report",
        "idblock-generator",
        "sev-feature-info",
        "verify_report",
    ]:
        src = os.path.join("tools", "attestation_server", "target", "debug", binary)
        run_command(f"cp {src} {config.dir.bin}")

    # Build digest calculator binary.
    run_command("cargo build --manifest-path=tools/digest_calc/Cargo.toml")
    run_command(f"cp ./tools/digest_calc/target/debug/digest_calc {config.dir.bin}")
    setup_host()

def create_vm():
    """
    Create a new virtual machine image using the provided template.
    """
    guest_dir = config.dir.guest
    image_name = config.vm_image_base_name
    template_user_data = config.vm_template_user_data
    create_vm_image(
        new_vm=image_name, build_dir=guest_dir, template_user_data=template_user_data
    )


def unpack_kernel():
    """
    Unpack the kernel package from a .deb file.
    """
    kernel_dir = config.dir.kernel
    kernel_deb = config.kernel_deb
    run_command(f"rm -rf {kernel_dir}")
    run_command(f"dpkg -x {kernel_deb} {kernel_dir}")


def initramfs_build():
    """
    Build the initramfs image using the provided script and Dockerfile.
    """
    build_dir = config.dir.build
    resource_dir = config.dir.resources
    kernel_dir = config.dir.kernel
    init_script = config.initramfs_script
    initrd = config.initrd
    dockerfile = config.initramfs_dockerfile
    target = "gpu" if config.gpu == "1" else "cpu"

    build_initramfs(
        kernel_dir=kernel_dir,
        init_script=init_script,
        dockerfile=dockerfile,
        context_dir=resource_dir,
        out=initrd,
        build_dir=build_dir,
        target=target,
    )


def setup_vm_config():
    """
    Create the virtual machine configuration file with the required parameters.
    """
    # Build a guest definition dictionary from the flattened config.
    vm_config_definition = {
        "host_cpu_family": config.host_cpu_family,
        "vcpu_count": config.vcpu_count,
        "guest_features": config.guest_features,
        "platform_info": config.platform_info,
        "guest_policy": config.guest_policy,
        "family_id": config.family_id,
        "image_id": config.image_id,
        "min_committed_tcb": config.min_committed_tcb,
    }
    create_vm_config_file(
        out_path=config.vm_config_file,
        ovmf_path=config.ovmf,
        kernel_path=config.kernel_vmlinuz,
        initrd_path=config.initrd,
        kernel_cmdline=f"{config.cmdline} {config.verity_params}",
        vm_config=vm_config_definition,
    )


def get_hashes():
    """
    Generate measurement inputs (hashes) from the VM configuration.
    """
    digest_calc_path = os.path.join(config.dir.bin, "digest_calc")
    out_file = os.path.join(os.getcwd(), "inputs.json")
    run_command(
        f"{digest_calc_path} --vm-definition {config.vm_config_file} > {out_file}"
    )


# -----------------------------------------------------------------------------
# Build Tasks
# -----------------------------------------------------------------------------
def build_base_image():
    """
    Build the base VM image by:
      1. Unpacking the kernel.
      2. Building the initramfs.
      3. Creating the VM image.
      4. Running QEMU setup.
    """
    print("===> Building base image")
    if config.gpu == "1":
        setup_gpu()
    unpack_kernel()
    initramfs_build()
    create_vm()
    run_setup()


def build_guest_image():
    """
    Build the guest image by:
      1. Building guest content.
      2. Setting up verity.
      3. Creating VM configuration.
      4. Generating hash measurements.
    """
    print("===> Building guest image")
    build_content()
    setup_verity()
    setup_vm_config()
    get_hashes()


def build_content():
    """
    Build the guest content using the provided Dockerfile.
    """
    build_guest_content(
        out_dir=config.dir.content, 
        dockerfile=config.content_dockerfile, 
        hb_branch=config.hb_branch,
        ao_branch=config.ao_branch
    )


def setup_verity():
    """
    Set up verity by running the verity setup shell script.
    """
    setup_guest(
        src_image=config.vm_image_base_path,
        build_dir=config.dir.build,
        out_image=config.verity_image,
        out_hash_tree=config.verity_hash_tree,
        out_root_hash=config.verity_root_hash,
        debug=config.debug,
    )


# -----------------------------------------------------------------------------
# Run and Network Tasks
# -----------------------------------------------------------------------------
def run_setup():
    """
    Run QEMU with the base image configuration.
    """
    cmd = (
        f"sudo -E {config.qemu_launch_script} {config.qemu_default_params} {config.qemu_extra_params} "
        f"-hda {config.vm_image_base_path} -hdb {config.vm_cloud_config} "
        f"-hb-port {config.qemu_hb_port} -qemu-port {config.qemu_port} -debug {config.debug} -enable-kvm {config.enable_kvm} -gpu {config.gpu}"
    )
    run_command(cmd)


def start_vm(data_disk=None, self=None, peer=None, no_auto=False):
    """
    Run the VM using QEMU with the guest image configuration.
    
    Args:
        data_disk: Optional path to a data disk image
        self: URL of this VM
        peer: URL of the peer VM
        no_auto: Skip automatic execution of post-start script
    """
    # Check if inputs.json exists and update vcpus, otherwise add -no-auto
    inputs_file = os.path.join(os.getcwd(), "inputs.json")
    
    if os.path.exists(inputs_file):
        print(f"Found {inputs_file}, updating vcpus with config.vcpu_count={config.vcpu_count}...")
        with open(inputs_file, "r") as f:
            inputs_data = json.load(f)
        
        inputs_data["vcpus"] = config.vcpu_count
        
        with open(inputs_file, "w") as f:
            json.dump(inputs_data, f, indent=2)
        
        print(f"Updated inputs.json with vcpus={config.vcpu_count}")
    else:
        print(f"Warning: {inputs_file} not found, adding -no-auto flag")
        no_auto = True

    base_cmd = (
        f"sudo -E {config.qemu_launch_script} {config.qemu_default_params} {config.qemu_snp_params} "
        f"-hda {config.verity_image} -hdb {config.verity_hash_tree} -load-config {config.vm_config_file} "
        f"-hb-port {config.qemu_hb_port} -qemu-port {config.qemu_port} -debug {config.debug} -enable-kvm {config.enable_kvm}"
    )
    
    # Add peer and self locations
    if peer:
        base_cmd += f" -peer {peer}"
    if self:
        base_cmd += f" -self {self}"
    
    # Add no-auto flag if specified
    if no_auto:
        base_cmd += " -no-auto"
    
    if data_disk is not None:
        cmd = f"{base_cmd} -data-disk {data_disk}"
    else:
        cmd = base_cmd
        
    run_command(cmd)

def start_release_vm(data_disk=None, self=None, peer=None, no_auto=False):
    """
    Start the VM in release mode, using files from the release folder.
    
    Args:
        data_disk: Optional path to a data disk image
        self: URL of this VM
        peer: URL of the peer VM
        no_auto: Skip automatic execution of post-start script
    """
    release_dir = os.path.join(os.getcwd(), "release")
    verity_image = os.path.join(release_dir, os.path.basename(config.verity_image))
    verity_hash_tree = os.path.join(release_dir, os.path.basename(config.verity_hash_tree))
    vm_config_file = os.path.join(release_dir, os.path.basename(config.vm_config_file))

    # Check if inputs.json exists and update vcpus, otherwise add -no-auto
    inputs_file = os.path.join(os.getcwd(), "inputs.json")
    
    if os.path.exists(inputs_file):
        print(f"Found {inputs_file}, updating vcpus with config.vcpu_count={config.vcpu_count}...")
        with open(inputs_file, "r") as f:
            inputs_data = json.load(f)
        
        inputs_data["vcpus"] = config.vcpu_count
        
        with open(inputs_file, "w") as f:
            json.dump(inputs_data, f, indent=2)
        
        print(f"Updated inputs.json with vcpus={config.vcpu_count}")
    else:
        print(f"Warning: {inputs_file} not found, adding -no-auto flag")
        no_auto = True
     
    base_cmd = (
        f"sudo -E {config.qemu_launch_script} {config.qemu_default_params} {config.qemu_snp_params} "
        f"-hda {verity_image} -hdb {verity_hash_tree} -load-config {vm_config_file} "
        f"-hb-port {config.qemu_hb_port} -qemu-port {config.qemu_port} -debug {config.debug} -enable-kvm {config.enable_kvm}"
    )
    
    # Add peer and self locations
    if peer:
        base_cmd += f" -peer {peer}"
    if self:
        base_cmd += f" -self {self}"
    
    # Add no-auto flag if specified
    if no_auto:
        base_cmd += " -no-auto"
    
    if data_disk is not None:
        cmd = f"{base_cmd} -data-disk {data_disk}"
    else:
        cmd = base_cmd
        
    run_command(cmd)

def package_release():
    """
    Package all files needed for starting the VM (as used in start_vm) into a release folder,
    then create a tar.gz archive of that folder using the shell tar command with verbose output.
    This function reads vm-config.toml to determine the paths for kernel_file, ovmf_file,
    and initrd_file, copies those files into the release folder, and updates the config file
    to point to the relative paths.
    """
    print("Starting package_release()...")

    # Define the release directory path relative to the current working directory.
    release_dir = os.path.join(os.getcwd(), "release")
    print(f"Release directory will be: {release_dir}")

    # Clean up the release folder if it exists.
    if os.path.exists(release_dir):
        print("Release directory exists. Removing it...")
        shutil.rmtree(release_dir)
    os.makedirs(release_dir, exist_ok=True)
    print("Created release directory.")

    # Copy verity image and hash tree into the release folder.
    files_to_copy = [config.verity_image, config.verity_hash_tree]
    for file in files_to_copy:
        print(f"Attempting to copy {file} ...")
        if os.path.exists(file):
            shutil.copy(file, release_dir)
            print(f"Copied {file} to {release_dir}")
        else:
            print(f"Warning: {file} does not exist and cannot be copied")

    # Read the original vm-config.toml file.
    if not os.path.exists(config.vm_config_file):
        print(f"Error: {config.vm_config_file} does not exist.")
        return

    print(f"Reading configuration from {config.vm_config_file} ...")
    with open(config.vm_config_file, "r") as f:
        config_contents = f.read()
    print("Original vm-config.toml contents:")
    print(config_contents)

    # Define the keys whose file paths we want to update.
    keys = ["kernel_file", "ovmf_file", "initrd_file"]
    extra_files = {}

    # For each key, use a regex to extract the file path.
    for key in keys:
        # This regex expects lines like: key = "some_path"
        print(f"Extracting value for key '{key}' ...")
        match = re.search(rf'^\s*{key}\s*=\s*"(.*?)"\s*$', config_contents, flags=re.MULTILINE)
        if match:
            extra_files[key] = match.group(1)
            print(f"Found {key} = {extra_files[key]}")
        else:
            print(f"Warning: {key} not found in {config.vm_config_file}")

    # Copy each extra file (if it exists) into the release folder.
    for key, filepath in extra_files.items():
        print(f"Attempting to copy {key} file: {filepath} ...")
        if os.path.exists(filepath):
            shutil.copy(filepath, release_dir)
            print(f"Copied {filepath} to {release_dir}")
        else:
            print(f"Warning: {filepath} for {key} does not exist and cannot be copied")

    # Update the config contents so that the file paths for the keys point to "./release/<basename>".
    for key, filepath in extra_files.items():
        new_path = "./release/" + os.path.basename(filepath)
        print(f"Updating {key} to point to {new_path} ...")
        # Replace the line using regex; assume the key appears on a line by itself.
        config_contents = re.sub(
            rf'^\s*{key}\s*=\s*".*?"\s*$',
            f'{key} = "{new_path}"',
            config_contents,
            flags=re.MULTILINE
        )

    print("Updated vm-config.toml contents:")
    print(config_contents)

    # Write the updated config to a new file in the release folder.
    vm_config_release = os.path.join(release_dir, os.path.basename(config.vm_config_file))
    with open(vm_config_release, "w") as f:
        f.write(config_contents)
    print(f"Wrote updated config to {vm_config_release}")

    # Define the path for the tar.gz archive.
    tar_path = os.path.join(os.getcwd(), "release.tar.gz")
    print(f"Tar archive will be created at: {tar_path}")

    # Build the shell tar command.
    # -c: create archive, -v: verbose, -z: gzip, -f: filename, -C: change to directory before archiving.
    tar_cmd = f"tar -cvzf {tar_path} -C {os.path.dirname(release_dir)} {os.path.basename(release_dir)}"
    print(f"Executing tar command: {tar_cmd}")

    # Execute the tar command.
    subprocess.run(tar_cmd, shell=True, check=True)
    print(f"Packaged release folder into {tar_path}")
    print("package_release() completed successfully.")

def download_release(url):
    """
    Download a tar.gz release from the provided URL and extract it into the release folder.
    """
    release_dir = os.path.join(os.getcwd(), "release")
    # Remove the entire release directory if it exists.
    if os.path.exists(release_dir):
        shutil.rmtree(release_dir)

    tarball_path = os.path.join(os.getcwd(), "release_download.tar.gz")
    print(f"Downloading release from {url} ...")
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(tarball_path, "wb") as f:
            shutil.copyfileobj(r.raw, f)
    print(f"Downloaded tarball to {tarball_path}")

    print(f"Extracting {tarball_path} to {os.getcwd()} ...")
    # Extract the tar.gz file
    with tarfile.open(tarball_path, "r:gz") as tar:
        tar.extractall(path=os.getcwd())
    os.remove(tarball_path)

    digest_calc_path = os.path.join(config.dir.bin, "digest_calc")
    out_file = os.path.join(os.getcwd(), "inputs.json")
    vm_config_release = os.path.join(release_dir, os.path.basename(config.vm_config_file))
    run_command(
        f"{digest_calc_path} --vm-definition {vm_config_release} > {out_file}"
    )
    print("Extraction complete.")

def setup_host():
    """
    Set up the host system using the SNP release installer.
    """
    snp_release_dir = os.path.join(config.dir.build, "snp-release")
    run_command(f"cd {snp_release_dir} && sudo ./install.sh")
def setup_gpu():
    """
    Setup the GPU CC for the host system and configure GPU passthrough.
    """
    gpu_admin_tools_dir = os.path.join(config.dir.build, "gpu-admin-tools")
    
    # Enable GPU CC mode
    print("Setting up GPU Confidential Computing mode...")
    run_command(f"cd {gpu_admin_tools_dir} && sudo python3 ./nvidia_gpu_tools.py --devices gpus --set-cc-mode=on --reset-after-cc-mode-switch")
    
    # Configure GPU passthrough using the dedicated script
    print("Configuring GPU passthrough...")
    passthrough_script = os.path.join(os.getcwd(), "scripts", "gpu_passthrough.sh")
    run_command(f"sudo {passthrough_script} setup")

def ssh_vm():
    """
    SSH into the virtual machine.
    """
    run_command(
        f"ssh -p {config.network_vm_port} -o UserKnownHostsFile={config.ssh_hosts_file} {config.network_vm_user}@{config.network_vm_host}"
    )


def clean():
    """
    Clean up the build directory.
    """
    run_command(f"rm -rf {config.dir.build}")


def show_help():
    """
    Display detailed help information about available commands.
    """
    help_text = """
HyperBEAM VM Automation Tool
============================

USAGE: 
  ./run COMMAND [OPTIONS]
  ./run COMMAND --help    (for command-specific help)

COMMANDS:
  init                Initialize the build environment (install dependencies, download SNP release)
  setup_host          Set up the host system using the SNP release installer
  build_base          Build the base VM image (unpack kernel, build initramfs, create VM)
  
  build_guest         Build the guest image (build content, set up verity, create VM config)
    Options:
      --hb-branch BRANCH     HyperBEAM branch to use
      --ao-branch BRANCH     AO branch to use
  
  start               Start the VM using QEMU with the guest image configuration
    Options:
      --data-disk PATH       Path to data disk image
      --self URL             URL of this VM
      --peer URL             URL of the peer VM
  
  start_release       Start the VM in release mode using files from the release folder
    Options:
      --data-disk PATH       Path to data disk image
      --self URL             URL of this VM
      --peer URL             URL of the peer VM
  
  package_release     Package all files needed for starting the VM into a release folder
  
  download_release    Download a tar.gz release from the provided URL
    Options:
      --url URL              URL to a tar.gz release file (required)
  
  ssh                 SSH into the virtual machine
  clean               Clean up the build directory
  help                Display this help information

EXAMPLES:
  ./run init
  ./run build_base
  ./run build_guest --hb-branch main --ao-branch v1.0
  ./run start --data-disk /path/to/disk.img --peer-location 192.168.1.2 --self-location 192.168.1.1
  ./run start_release --data-disk /path/to/disk.img --peer-location 192.168.1.1 --self-location 192.168.1.2
  ./run download_release --url https://example.com/release.tar.gz
    """
    print(help_text)


# -----------------------------------------------------------------------------
# Main Entry Point
# -----------------------------------------------------------------------------
def main():
    """
    Parse command-line arguments and execute the corresponding task.
    """
    # Create the main parser
    parser = argparse.ArgumentParser(
        description="HyperBEAM VM Automation Tool"
    )
    
    # Create subparsers for each command
    subparsers = parser.add_subparsers(dest="target", help="Target task to execute")
    
    # Help command
    help_parser = subparsers.add_parser("help", help="Display detailed help information")
    
    # Init command
    init_parser = subparsers.add_parser("init", help="Initialize the build environment")
    
    # Setup host command
    setup_host_parser = subparsers.add_parser("setup_host", help="Set up the host system")
    
    # Setup GPU command
    setup_gpu_parser = subparsers.add_parser("setup_gpu", help="Setup the GPU CC for the host system")
    
    # Build base command
    build_base_parser = subparsers.add_parser("build_base", help="Build the base VM image")
    
    # Build guest command
    build_guest_parser = subparsers.add_parser("build_guest", help="Build the guest image")
    build_guest_parser.add_argument(
        "--hb-branch",
        help="HyperBEAM branch to use"
    )
    build_guest_parser.add_argument(
        "--ao-branch",
        help="AO branch to use"
    )
    
    # Start command
    start_parser = subparsers.add_parser("start", help="Start the VM")
    start_parser.add_argument(
        "--data-disk",
        help="Path to data disk image"
    )
    start_parser.add_argument(
        "--peer",
        required=False,
        help="Location of the peer VM"
    )
    start_parser.add_argument(
        "--self",
        required=False,
        help="Location of this VM"
    )
    start_parser.add_argument(
        "--no-auto",
        action="store_true",
        help="Skip automatic execution of post-start script"
    )
    
    # Start release command
    start_release_parser = subparsers.add_parser("start_release", help="Start the VM in release mode")
    start_release_parser.add_argument(
        "--data-disk",
        help="Path to data disk image"
    )
    start_release_parser.add_argument(
        "--self",
        required=False,
        help="Location of this VM"
    )
    start_release_parser.add_argument(
        "--peer",
        required=False,
        help="Location of the peer VM"
    )
    start_release_parser.add_argument(
        "--no-auto",
        action="store_true",
        help="Skip automatic execution of post-start script"
    )

    # Package release command
    package_release_parser = subparsers.add_parser("package_release", help="Package files for release")
    
    # Download release command
    download_release_parser = subparsers.add_parser("download_release", help="Download a release")
    download_release_parser.add_argument(
        "--url",
        required=True,
        help="URL to a tar.gz release file (required)"
    )
    
    # SSH command
    ssh_parser = subparsers.add_parser("ssh", help="SSH into the virtual machine")
    
    # Clean command
    clean_parser = subparsers.add_parser("clean", help="Clean up the build directory")
    
    args = parser.parse_args()
    
    # Show help if no target is provided
    if not args.target:
        show_help()
        sys.exit(0)
        
    # Handle help command
    if args.target == "help":
        show_help()
        sys.exit(0)
    
    # Set configuration values for build_guest
    if args.target == "build_guest":
        if args.hb_branch:
            config.hb_branch = args.hb_branch
        if args.ao_branch:
            config.ao_branch = args.ao_branch
    
    # Download release and exit
    if args.target == "download_release":
        download_release(args.url)
        sys.exit(0)

    # Execute the appropriate function based on target
    if args.target == "init":
        init()
    elif args.target == "setup_host":
        setup_host()
    elif args.target == "setup_gpu":
        setup_gpu()
    elif args.target == "build_base":
        build_base_image()
    elif args.target == "build_guest":
        build_guest_image()
    elif args.target == "start":
        start_vm(args.data_disk, args.self or "http://localhost:80", args.peer or "http://localhost:80", args.no_auto)
    elif args.target == "start_release":
        start_release_vm(args.data_disk, args.self or "http://localhost:80", args.peer or "http://localhost:80", args.no_auto)
    elif args.target == "package_release":
        package_release()
    elif args.target == "ssh":
        ssh_vm()
    elif args.target == "clean":
        clean()
    else:
        print(f"Unknown target: {args.target}")
        show_help()
        sys.exit(1)


if __name__ == "__main__":
    main()
